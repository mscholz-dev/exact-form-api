generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGO_URI")
}

model user {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  username   String       @unique
  email      String       @unique
  role       user_role    @default(CLIENT)
  password   String
  created_at DateTime     @default(now())
  updated_at DateTime     @default(now())
  market     Boolean
  user_ip    user_ip[]
  user_token user_token[]
  form_user  form_user[]
}

model user_ip {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  ip         String
  user       user     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id    String   @db.ObjectId
  created_at DateTime @default(now())
}

model user_token {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  user       user     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id    String   @db.ObjectId
  type       token    @default(CHANGE_EMAIL)
  token      String   @unique
  created_at DateTime @default(now())
  used       Boolean
}

model contact {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  last_name     String
  first_name    String
  email         String
  message       String
  contact_phone contact_phone?
  created_at    DateTime       @default(now())
}

model contact_phone {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  phone      String
  contact    contact @relation(fields: [contact_id], references: [id], onDelete: Cascade)
  contact_id String  @unique @db.ObjectId
}

model error {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  stack      String
  created_at DateTime @default(now())
}

model form {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  key        String
  timezone   String
  form_user  form_user[]
  form_item  form_item[]
  created_at DateTime    @default(now())
  updated_at DateTime    @default(now())
}

model form_user {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  user       user      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id    String    @db.ObjectId
  form       form      @relation(fields: [form_id], references: [id], onDelete: Cascade)
  form_id    String    @db.ObjectId
  role       form_role @default(OWNER)
  created_at DateTime  @default(now())
}

model form_item {
  id                         String                      @id @default(auto()) @map("_id") @db.ObjectId
  form                       form                        @relation(fields: [form_id], references: [id], onDelete: Cascade)
  form_id                    String                      @db.ObjectId
  data                       Json
  trash                      Boolean                     @default(false)
  form_item_user_agent       form_item_user_agent?
  form_item_referer_url      form_item_referer_url?
  form_item_geo_localisation form_item_geo_localisation?
  created_at                 DateTime                    @default(now())
  updated_at                 DateTime                    @default(now())
}

model form_item_user_agent {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  form_item    form_item @relation(fields: [form_item_id], references: [id], onDelete: Cascade)
  form_item_id String    @unique @db.ObjectId
  user_agent   String
}

model form_item_referer_url {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  form_item    form_item @relation(fields: [form_item_id], references: [id], onDelete: Cascade)
  form_item_id String    @unique @db.ObjectId
  referer_url  String
}

model form_item_geo_localisation {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  form_item    form_item @relation(fields: [form_item_id], references: [id], onDelete: Cascade)
  form_item_id String    @unique @db.ObjectId
  city         String
  region       String
  country      String
}

enum user_role {
  CLIENT
  ADMIN
  SUPER_ADMIN
}

enum token {
  CHANGE_EMAIL
}

enum form_role {
  CLIENT
  OWNER
}
